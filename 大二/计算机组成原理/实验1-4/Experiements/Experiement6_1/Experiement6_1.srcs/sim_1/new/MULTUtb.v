`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2024/04/17 18:11:37
// Design Name: 
// Module Name: MULTUtb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module MULTUtb();
  reg clk;
  reg reset;
  reg [15:0] a;
  reg [15:0] b;
  wire [31:0] z;
  // 实例化被测试的 MULTU 模块
  MULTU dut (
    .clk(clk),
    .reset(reset),
    .a(a),
    .b(b),
    .z(z)
  );
  // 时钟生成
  always #5 clk = ~clk;
  // 初始化
  initial begin
    clk = 0;
    reset = 1;
    a = 0;
    b = 0;
    #10 reset = 0;  // 复位信号保持为低电平一段时间后释放
    
    #10;
    // 输入值设置
    a = 16'b0;  // 设置被乘数
    b = 16'b0;   // 设置乘数

    #10
    a = 16'd7;
    b = 16'd8;
    
    #10
    a = 16'd9;
    b = 16'd9;
    
    #10
    a = 16'd3;
    b = 16'd2;

    #10;
    // 输入值设置
    a = 16'b0;  // 设置被乘数
    b = 16'b1111111111111111;   // 设置乘数
    
    #10;
    // 输入值设置
    a = 16'b1010101010101010;  // 设置被乘数
    b = 16'b0;   // 设置乘数
    
    #10;
    // 输入值设置
    a = 16'b1111111111111111;  // 设置被乘数
    b = 16'b1111111111111111;   // 设置乘数
    
    #10;
    // 输入值设置
    a = 16'b1000000000000000;  // 设置被乘数
    b = 16'b1010101010101010;   // 设置乘数
    
    #10;
    // 输入值设置
    a = 16'b1010101010101010;  // 设置被乘数
    b = 16'b1000000000000000;   // 设置乘数
    
    #10;
    // 输入值设置
    a = 16'b1011110110111101;  // 设置被乘数
    b = 16'b1101000011010000;   // 设置乘数
    
    #10;
    // 输入值设置
    a = 16'b1000111111110001;  // 设置被乘数
    b = 16'b1110111001111110;   // 设置乘数
    $finish;
  end
endmodule
